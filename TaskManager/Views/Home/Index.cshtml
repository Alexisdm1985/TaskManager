@using Microsoft.AspNetCore.Mvc.Localization;

@inject IViewLocalizer localizer
@{
    //<link rel="stylesheet" href="~/css/custom.css" asp-append-version="true" />
}



@*<img src="~/img/background-kirby.jpg"/>*@
<div class="container" id="containerHome">

    <div class="text-center">
        <h1 class="display-4 fw-bold" style="color: white">@localizer["Mis Tareas"]</h1>

        <button class="btn btn-primary mb-3" onclick="agregarTareas()">
            @localizer["Agregar nueva tarea"]
        </button>
    </div>

    <div id="contenedor-listado-tareas" class="text-center">


        @*
        "data-bind" proviene de Knockout JS, y nos permite usar codigo js
        En este caso por cada tarea en el arreglo tareas creara un nuevo div
        *@
        <div id="reordenable" class="text-start" data-bind="foreach: tareas">

            <div name="tarea" data-bind="click: manejarClickTarea" class="border mb-2 p-2" style="cursor: pointer" id="cardTarea">
                @*
                Con "text: titulo" decimos que buscamos la propiedad titulo en tareas, y
                se imprimira en este div
                *@
                <div data-bind="text: titulo, hidden: esNuevaTarea" class="fw-bold"></div>

                @*El valor del input sea el titulo de tareas.tarea[i].titulo
                sera visible solo si la propiedad del modelo "esNuevaTarea" es true
                Tendra un evento que al quitar el focus, acciona la funcion "manejarFocusOutTituloTarea"
                (automaticamente se envia la tarea en cuestion como argumento)*@
                <input type="text" name="titulo-tarea" autocomplete="off"
                       data-bind="value: titulo,
                        visible: esNuevaTarea,
                        event: {focusout: manejarFocusOutTituloTarea},
                        attr: {'data-id': id}" />
            </div>
        </div>

        <div data-bind="visible: cargandoInfo" class="spinner-border">
            <span class="visually-hidden">Cargando...</span>
        </div>

        <div data-bind="visible: noHayTareas">
            <span>No hay tareas para mostrar</span>
        </div>
    </div>
</div>

<partial name="_ModalEditarTarea" />

@section Scripts {

    <script src="~/js/utilidades.js" asp-append-version="true"></script>
    <script src="~/js/tareas.js" asp-append-version="true"></script>
    <script src="~/js/Pasos.js" asp-append-version="true"></script>


    <script>
        // En el video hace todo este script de otra forma, instancia una funcion para crear el modelo
        // en vez de crear el modelo directamente como yo lo tenia.
        // Esto es porque de esta forma podemos instanciar estos modelos, en cambio de la otra se sigue
        // usando el mismo modelo (al menos que el modelo como yo lo tenia se cree en la accion de
        // crear una nueva tarea y no en un script al cargar la pagina)

        // URL
        const urlTareas = "/api/tareas";
        const urlPasos = "/api/pasos";

        // Creacion modal con bootstrap
        // Nota: se muestra con el metodo .show() en tarea.js
        const modalEditarTarea = document.getElementById('modal-editar-tarea');
        const modalEditarTareaBootstrap = new bootstrap.Modal(modalEditarTarea);

        // ### MODELS ###
        function fnListadoTareasViewModel() {
            var self = this;

            self.tareas = ko.observableArray([]);
            self.cargandoInfo = ko.observable(true);
            self.noHayTareas = ko.pureComputed(function () {

                if (self.cargandoInfo()) {
                    return false;
                }

                return self.tareas().length === 0;
            })
        }

        function fnTareaViewModel({ id, titulo }) {
            var self = this;
            self.id = ko.observable(id),
                self.titulo = ko.observable(titulo),
                self.esNuevaTarea = ko.pureComputed(function () {

                    // Si el id es 0 entonces corresponde a una nueva tarea
                    return self.id() == 0;
                })
        }

        const tareaEditarVM = {
            id: 0,
            titulo: ko.observable(''),
            descripcion: ko.observable(''),
            pasos: ko.observableArray([])
        }

        // Instancia la funcion como modelo en "listadoTareasViewModel"
        const listadoTareasViewModel = new fnListadoTareasViewModel();

        // Modelo para los pasos de la tarea
        function pasosTareaVM({id, descripcion, realizado, modoEdicion}){
            var self = this;
            self.id = ko.observable(id || 0);
            self.descripcion = ko.observable(descripcion || '');
            self.descripcionAnterior = '';
            self.realizado = ko.observable(realizado);
            self.modoEdicion = ko.observable(modoEdicion);

            self.esNuevoPaso = ko.pureComputed(function () {
                return self.id() === 0;
            })
        }

        ObtenerListaTareas();

        // Enlace del modelo con el html en la vista
        ko.applyBindings(listadoTareasViewModel, document.getElementById('contenedor-listado-tareas'));
        ko.applyBindings(tareaEditarVM, document.getElementById('modal-editar-tarea'));
    </script>
}